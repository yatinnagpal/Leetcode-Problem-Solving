class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        if(n<3)
            return 0;
        int lmax[n];
        lmax[0]=height[0];
        for(int i=1;i<n;i++)
        {
            int temp=max(lmax[i-1],height[i]);
            lmax[i]=temp;
        }
        int rmax[n];
        rmax[n-1]=height[n-1];
        for(int i=n-2;i>=0;i--)
        {
            int temp=max(height[i],rmax[i+1]);
            rmax[i]=temp;
        }
        int water=0;
        for(int i=1;i<n-1;i++)
        {
            water+=min(lmax[i],rmax[i])-height[i];
        }
        return water;
    }
};

//Geeks For Geeks Code

class Solution{

    // Function to find the trapped water between the blocks.
    public:
    int trappingWater(int arr[], int n){
        int lmax[n];
        lmax[0]=arr[0];
        int rmax[n];
        rmax[n-1]=arr[n-1];
        for(int i=1;i<n;i++)
        {
            int temp=max(arr[i],lmax[i-1]);
            lmax[i]=temp;
        }
        for(int i=n-2;i>=0;i--)
        {
            int temp=max(arr[i],rmax[i+1]);
            rmax[i]=temp;
        }
        int result=0;
        for(int i=1;i<n-1;i++)
        {
             result+=min(lmax[i],rmax[i])-arr[i];
        }
        return result;
    }
};
